// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: usercenter.proto

package user_center_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Create_FullMethodName          = "/User/Create"
	User_Update_FullMethodName          = "/User/Update"
	User_DeleteByIds_FullMethodName     = "/User/DeleteByIds"
	User_FindPage_FullMethodName        = "/User/FindPage"
	User_FindByMobile_FullMethodName    = "/User/FindByMobile"
	User_IsExistByMobile_FullMethodName = "/User/IsExistByMobile"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Create(ctx context.Context, in *UserCenterUserInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UserCenterUserInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteByIds(ctx context.Context, in *UserCenterIDS, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindPage(ctx context.Context, in *UserCenterPageInfo, opts ...grpc.CallOption) (*UserCenterUserAll, error)
	FindByMobile(ctx context.Context, in *UserCenterMobile, opts ...grpc.CallOption) (*UserCenterUserInfo, error)
	IsExistByMobile(ctx context.Context, in *UserCenterMobile, opts ...grpc.CallOption) (*UserCenterIsExists, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Create(ctx context.Context, in *UserCenterUserInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, User_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Update(ctx context.Context, in *UserCenterUserInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, User_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteByIds(ctx context.Context, in *UserCenterIDS, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, User_DeleteByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindPage(ctx context.Context, in *UserCenterPageInfo, opts ...grpc.CallOption) (*UserCenterUserAll, error) {
	out := new(UserCenterUserAll)
	err := c.cc.Invoke(ctx, User_FindPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindByMobile(ctx context.Context, in *UserCenterMobile, opts ...grpc.CallOption) (*UserCenterUserInfo, error) {
	out := new(UserCenterUserInfo)
	err := c.cc.Invoke(ctx, User_FindByMobile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IsExistByMobile(ctx context.Context, in *UserCenterMobile, opts ...grpc.CallOption) (*UserCenterIsExists, error) {
	out := new(UserCenterIsExists)
	err := c.cc.Invoke(ctx, User_IsExistByMobile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Create(context.Context, *UserCenterUserInfo) (*emptypb.Empty, error)
	Update(context.Context, *UserCenterUserInfo) (*emptypb.Empty, error)
	DeleteByIds(context.Context, *UserCenterIDS) (*emptypb.Empty, error)
	FindPage(context.Context, *UserCenterPageInfo) (*UserCenterUserAll, error)
	FindByMobile(context.Context, *UserCenterMobile) (*UserCenterUserInfo, error)
	IsExistByMobile(context.Context, *UserCenterMobile) (*UserCenterIsExists, error)
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Create(context.Context, *UserCenterUserInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServer) Update(context.Context, *UserCenterUserInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServer) DeleteByIds(context.Context, *UserCenterIDS) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIds not implemented")
}
func (UnimplementedUserServer) FindPage(context.Context, *UserCenterPageInfo) (*UserCenterUserAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPage not implemented")
}
func (UnimplementedUserServer) FindByMobile(context.Context, *UserCenterMobile) (*UserCenterUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMobile not implemented")
}
func (UnimplementedUserServer) IsExistByMobile(context.Context, *UserCenterMobile) (*UserCenterIsExists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistByMobile not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCenterUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*UserCenterUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCenterUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Update(ctx, req.(*UserCenterUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCenterIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteByIds(ctx, req.(*UserCenterIDS))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCenterPageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindPage(ctx, req.(*UserCenterPageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCenterMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindByMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindByMobile(ctx, req.(*UserCenterMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IsExistByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCenterMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsExistByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_IsExistByMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsExistByMobile(ctx, req.(*UserCenterMobile))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _User_Update_Handler,
		},
		{
			MethodName: "DeleteByIds",
			Handler:    _User_DeleteByIds_Handler,
		},
		{
			MethodName: "FindPage",
			Handler:    _User_FindPage_Handler,
		},
		{
			MethodName: "FindByMobile",
			Handler:    _User_FindByMobile_Handler,
		},
		{
			MethodName: "IsExistByMobile",
			Handler:    _User_IsExistByMobile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usercenter.proto",
}

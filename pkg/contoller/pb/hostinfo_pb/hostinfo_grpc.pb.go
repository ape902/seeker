// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: hostinfo.proto

package hostinfo_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HostInfo_FindPage_FullMethodName             = "/HostInfo/FindPage"
	HostInfo_Create_FullMethodName               = "/HostInfo/Create"
	HostInfo_Delete_FullMethodName               = "/HostInfo/Delete"
	HostInfo_UpdateHost_FullMethodName           = "/HostInfo/UpdateHost"
	HostInfo_UpdateAuthentication_FullMethodName = "/HostInfo/UpdateAuthentication"
	HostInfo_IsExistByIp_FullMethodName          = "/HostInfo/IsExistByIp"
	HostInfo_FindAll_FullMethodName              = "/HostInfo/FindAll"
)

// HostInfoClient is the client API for HostInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostInfoClient interface {
	FindPage(ctx context.Context, in *HostInfoPageInfo, opts ...grpc.CallOption) (*HostInfoResp, error)
	Create(ctx context.Context, in *HostAndAuthentication, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *HostInfoIdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAuthentication(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IsExistByIp(ctx context.Context, in *HostInfoIpRequest, opts ...grpc.CallOption) (*HostInfoIsExists, error)
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HostInfoResp, error)
}

type hostInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewHostInfoClient(cc grpc.ClientConnInterface) HostInfoClient {
	return &hostInfoClient{cc}
}

func (c *hostInfoClient) FindPage(ctx context.Context, in *HostInfoPageInfo, opts ...grpc.CallOption) (*HostInfoResp, error) {
	out := new(HostInfoResp)
	err := c.cc.Invoke(ctx, HostInfo_FindPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostInfoClient) Create(ctx context.Context, in *HostAndAuthentication, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HostInfo_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostInfoClient) Delete(ctx context.Context, in *HostInfoIdsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HostInfo_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostInfoClient) UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HostInfo_UpdateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostInfoClient) UpdateAuthentication(ctx context.Context, in *Authentication, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HostInfo_UpdateAuthentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostInfoClient) IsExistByIp(ctx context.Context, in *HostInfoIpRequest, opts ...grpc.CallOption) (*HostInfoIsExists, error) {
	out := new(HostInfoIsExists)
	err := c.cc.Invoke(ctx, HostInfo_IsExistByIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostInfoClient) FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HostInfoResp, error) {
	out := new(HostInfoResp)
	err := c.cc.Invoke(ctx, HostInfo_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostInfoServer is the server API for HostInfo service.
// All implementations must embed UnimplementedHostInfoServer
// for forward compatibility
type HostInfoServer interface {
	FindPage(context.Context, *HostInfoPageInfo) (*HostInfoResp, error)
	Create(context.Context, *HostAndAuthentication) (*emptypb.Empty, error)
	Delete(context.Context, *HostInfoIdsRequest) (*emptypb.Empty, error)
	UpdateHost(context.Context, *Host) (*emptypb.Empty, error)
	UpdateAuthentication(context.Context, *Authentication) (*emptypb.Empty, error)
	IsExistByIp(context.Context, *HostInfoIpRequest) (*HostInfoIsExists, error)
	FindAll(context.Context, *emptypb.Empty) (*HostInfoResp, error)
}

// UnimplementedHostInfoServer must be embedded to have forward compatible implementations.
type UnimplementedHostInfoServer struct {
}

func (UnimplementedHostInfoServer) FindPage(context.Context, *HostInfoPageInfo) (*HostInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPage not implemented")
}
func (UnimplementedHostInfoServer) Create(context.Context, *HostAndAuthentication) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHostInfoServer) Delete(context.Context, *HostInfoIdsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHostInfoServer) UpdateHost(context.Context, *Host) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedHostInfoServer) UpdateAuthentication(context.Context, *Authentication) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthentication not implemented")
}
func (UnimplementedHostInfoServer) IsExistByIp(context.Context, *HostInfoIpRequest) (*HostInfoIsExists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistByIp not implemented")
}
func (UnimplementedHostInfoServer) FindAll(context.Context, *emptypb.Empty) (*HostInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedHostInfoServer) mustEmbedUnimplementedHostInfoServer() {}

// UnsafeHostInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostInfoServer will
// result in compilation errors.
type UnsafeHostInfoServer interface {
	mustEmbedUnimplementedHostInfoServer()
}

func RegisterHostInfoServer(s grpc.ServiceRegistrar, srv HostInfoServer) {
	s.RegisterService(&HostInfo_ServiceDesc, srv)
}

func _HostInfo_FindPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfoPageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).FindPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_FindPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).FindPage(ctx, req.(*HostInfoPageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAndAuthentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).Create(ctx, req.(*HostAndAuthentication))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfoIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).Delete(ctx, req.(*HostInfoIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostInfo_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_UpdateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).UpdateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostInfo_UpdateAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).UpdateAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_UpdateAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).UpdateAuthentication(ctx, req.(*Authentication))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostInfo_IsExistByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfoIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).IsExistByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_IsExistByIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).IsExistByIp(ctx, req.(*HostInfoIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostInfo_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostInfoServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostInfo_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostInfoServer).FindAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HostInfo_ServiceDesc is the grpc.ServiceDesc for HostInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HostInfo",
	HandlerType: (*HostInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPage",
			Handler:    _HostInfo_FindPage_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _HostInfo_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HostInfo_Delete_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _HostInfo_UpdateHost_Handler,
		},
		{
			MethodName: "UpdateAuthentication",
			Handler:    _HostInfo_UpdateAuthentication_Handler,
		},
		{
			MethodName: "IsExistByIp",
			Handler:    _HostInfo_IsExistByIp_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _HostInfo_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hostinfo.proto",
}
